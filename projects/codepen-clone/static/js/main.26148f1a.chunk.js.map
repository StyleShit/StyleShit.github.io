{"version":3,"sources":["hooks/useStickyState.js","components/Editor.js","components/Output.js","components/App.js","index.js"],"names":["useStickyState","key","defaultValue","useState","stickyValue","window","localStorage","getItem","JSON","parse","value","setValue","useEffect","setItem","stringify","Editor","title","language","appPrefix","isCollapsed","setCollapse","className","onClick","e","prev","onBeforeChange","editor","data","options","mode","theme","lineNumbers","indentWithTabs","Output","srcDoc","App","APP_PREFIX","htmlCode","setHtmlCode","cssCode","setCssCode","jsCode","setJsCode","output","setOutput","timeout","setTimeout","trim","clearTimeout","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAGe,SAASA,EAAgBC,EAAKC,GAC5C,IAAD,EACgCC,oBAAU,WAGlC,IAAMC,EAAcC,OAAOC,aAAaC,QAASN,GACjD,OAAuB,OAAhBG,EAAuBI,KAAKC,MAAOL,GAAgBF,KALlE,mBACYQ,EADZ,KACmBC,EADnB,KAgBI,OAPAC,qBAAW,WAGPP,OAAOC,aAAaO,QAASZ,EAAKO,KAAKM,UAAWJ,MAEnD,CAAET,EAAKS,IAEH,CAAEA,EAAOC,G,yCCRL,SAASI,EAAT,GACd,IADgCL,EACjC,EADiCA,MAAOM,EACxC,EADwCA,MAAOC,EAC/C,EAD+CA,SAAUN,EACzD,EADyDA,SACzD,EACyCX,EADzC,EADmEkB,UAEE,aAAeD,GAAU,GAD9F,mBACYE,EADZ,KACyBC,EADzB,KAGI,OACI,yBAAKC,UAAS,2BAAwBF,EAAc,YAAc,KAE9D,yBAAKE,UAAU,gBACX,4BAAML,GACN,4BAAQK,UAAU,gBAAgBC,QAAU,SAAEC,GAC1CH,GAAa,SAAAI,GAAI,OAAKA,SAI9B,kBAAC,aAAD,CAAYd,MAAQA,EAChBe,eAAgB,SAAEC,EAAQC,EAAMjB,GAC5BC,EAAUD,IAEdkB,QAAS,CACLC,KAAMZ,EACNa,MAAO,WACPC,aAAa,EACbC,gBAAgB,MChCrB,SAASC,EAAT,GACd,IADgCC,EACjC,EADiCA,OAE7B,OACI,yBAAKb,UAAU,oBACX,4BAAQL,MAAM,SAASK,UAAuB,KAAXa,EAAgB,WAAa,GACxDA,OAASA,K,MCyDdC,MAzDf,WAGC,IAAMC,EAAa,iBAFpB,EAKmCpC,EAAgBoC,EAAa,YAAa,sBAL7E,mBAKSC,EALT,KAKmBC,EALnB,OAMkCtC,EAAgBoC,EAAa,WAAY,gDAN3E,mBAMSG,EANT,KAMkBC,EANlB,OAOgCxC,EAAgBoC,EAAa,UAAW,IAPxE,mBAOSK,EAPT,KAOiBC,EAPjB,OAS+BvC,mBAAU,IATzC,mBASSwC,EATT,KASiBC,EATjB,KAyCC,OA7BAhC,qBAAW,WAGV,IAAMiC,EAAUC,YAAY,WAEH,KAApBT,EAASU,QAAoC,KAAnBR,EAAQQ,QAAmC,KAAlBN,EAAOM,OAE7DH,EAAU,sBAAD,OACEL,EADF,qCAECF,EAFD,sCAGGI,EAHH,yBAUTG,EAAW,MAGV,KAEH,OAAM,WACLI,aAAcH,MAGb,CAAER,EAAUE,EAASE,IAIvB,yBAAKpB,UAAU,iBACd,yBAAKA,UAAU,gBACd,kBAACN,EAAD,CAAQG,UAAYkB,EAAapB,MAAM,OAAOC,SAAS,MAAMP,MAAQ2B,EAAW1B,SAAW2B,IAC3F,kBAACvB,EAAD,CAAQG,UAAYkB,EAAapB,MAAM,MAAMC,SAAS,MAAMP,MAAQ6B,EAAU5B,SAAW6B,IACzF,kBAACzB,EAAD,CAAQG,UAAYkB,EAAapB,MAAM,KAAKC,SAAS,aAAaP,MAAQ+B,EAAS9B,SAAW+B,KAG/F,yBAAKrB,UAAU,eACd,kBAACY,EAAD,CAAQC,OAASS,OCtDrBM,IAASC,OACR,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,U","file":"static/js/main.26148f1a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\n// enhanced useState which uses localStorage to keep the state after refreshing\r\nexport default function useStickyState( key, defaultValue )\r\n{\r\n    const [ value, setValue ] = useState( () => {\r\n\r\n        // return the saved state if present, or defaultValue otherwise\r\n        const stickyValue = window.localStorage.getItem( key );\r\n        return stickyValue !== null ? JSON.parse( stickyValue ) : defaultValue;\r\n\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        // save the state to localStorage\r\n        window.localStorage.setItem( key, JSON.stringify( value ));\r\n\r\n    }, [ key, value ]);\r\n\r\n    return [ value, setValue ];\r\n}","import React from 'react';\r\nimport useStickyState from '../hooks/useStickyState';\r\n\r\n// Codemirror \r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/theme/material.css';\r\nimport 'codemirror/mode/xml/xml';\r\nimport 'codemirror/mode/css/css';\r\nimport 'codemirror/mode/javascript/javascript';\r\nimport { Controlled as CodeMirror } from 'react-codemirror2';\r\n\r\n\r\nexport default function Editor({ value, title, language, setValue, appPrefix })\r\n{\r\n    const [ isCollapsed, setCollapse ] = useStickyState( appPrefix + 'collapsed-' + language, false );\r\n\r\n    return (\r\n        <div className={ `editor-container ${ isCollapsed ? 'collapsed' : '' }` }>\r\n            \r\n            <div className=\"editor-title\">\r\n                <h2>{ title }</h2>\r\n                <button className=\"toggle-editor\" onClick={ ( e ) => {\r\n                    setCollapse( prev => !prev );\r\n                }}></button>\r\n            </div>\r\n\r\n            <CodeMirror value={ value } \r\n                onBeforeChange={( editor, data, value ) => {\r\n                    setValue( value );\r\n                }}\r\n                options={{\r\n                    mode: language,\r\n                    theme: 'material',\r\n                    lineNumbers: true,\r\n                    indentWithTabs: true\r\n                }} />\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Output({ srcDoc })\r\n{\r\n    return (\r\n        <div className=\"output-container\">\r\n            <iframe title=\"output\" className={ srcDoc !== '' ? 'has-code' : '' } \r\n                    srcDoc={ srcDoc } />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport useStickyState from '../hooks/useStickyState';\nimport Editor from './Editor';\nimport Output from './Output';\nimport './css/App.css';\n\n\nfunction App() \n{\n\t// prefix for local storage keys\n\tconst APP_PREFIX = 'codepen-clone_';\n\n\t// code handlers\n\tconst [ htmlCode, setHtmlCode ] = useStickyState( APP_PREFIX + 'html-code', '<h1>It Works!</h1>' );\n\tconst [ cssCode, setCssCode ] \t= useStickyState( APP_PREFIX + 'css-code', 'body { background-color: #333; color: #FFF }' );\n\tconst [ jsCode, setJsCode ] \t= useStickyState( APP_PREFIX + 'js-code', '' );\n\n\tconst [ output, setOutput ] = useState( '' );\n\n\t// handle code changes and change the output accordingly\n\tuseEffect( () => {\n\n\t\t// wait for user to stop typing to prevent too many updates\n\t\tconst timeout = setTimeout( () => {\n\n\t\t\tif( htmlCode.trim() !== '' || cssCode.trim() !== '' || jsCode.trim() !== '' )\n\t\t\t{\n\t\t\t\tsetOutput( `\n\t\t\t\t\t<style>${ cssCode }</style>\n\t\t\t\t\t<body>${ htmlCode }</body>\n\t\t\t\t\t<script>${ jsCode }</script>\n\t\t\t\t` );\n\t\t\t}\n\n\t\t\t// this is actually just to make the iframe colored again if there is no code\n\t\t\telse\n\t\t\t{\n\t\t\t\tsetOutput( '' );\n\t\t\t}\n\n\t\t}, 300);\n\n\t\treturn() => {\n\t\t\tclearTimeout( timeout );\n\t\t}\n\n\t}, [ htmlCode, cssCode, jsCode ]);\n\n\n\treturn (\n\t\t<div className=\"codepen-clone\">\n\t\t\t<div className=\"editors-pane\">\n\t\t\t\t<Editor appPrefix={ APP_PREFIX } title=\"HTML\" language=\"xml\" value={ htmlCode } setValue={ setHtmlCode } />\n\t\t\t\t<Editor appPrefix={ APP_PREFIX } title=\"CSS\" language=\"css\" value={ cssCode } setValue={ setCssCode } />\n\t\t\t\t<Editor appPrefix={ APP_PREFIX } title=\"JS\" language=\"javascript\" value={ jsCode } setValue={ setJsCode } />\n\t\t\t</div>\n\n\t\t\t<div className=\"output-pane\">\n\t\t\t\t<Output srcDoc={ output } />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);"],"sourceRoot":""}